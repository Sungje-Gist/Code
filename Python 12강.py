# 문자열.함수(매개변수, 매개변수)
# 주어.동사(목적어, 목적어)
# print가 있어야 출력 가능.

# format함수: "{} {} {} {}".format(1, 2, 3, 4) --> 문자열을 {}로 입력해주게 되면 뒤의 매개변수가 순서대로 {}에 입력이 되어 출력이 된다.(단 매개변수의 경우 숫자는 ""가 필요없지만, 문자열의 경우 ""가 꼭 필요하다.)
print("{}년 {}월 {}일 {}요일".format(2021, 5, 25, "화"))
# {}의 개수가 매개변수의 개수보다 많으면 오류가 생긴다. 그렇지만 {}의 개수보다 매개변수의 개수가 더 많다고 해서 오류가 발생하지는 않는다. 할당된 {}만큼만 대입된다. 

#format() 함수의 다양한 기능

# 1. 정수를 특정 칸에 출력하기

print("{:d}".format(1308)) # 기본 출력방식(:d가 없어도 똑같다.) (C언어와 마찬가지로 정수를 표기할때는 d를 사용한다. C언어와 다른점은 %를 쓰지 않고, :를 쓴다는 점이다.)

print("{:5d}".format(1308)) # 숫자를 포함해서 5칸을 채운다. 출력시 (공백)1308 --> 총 5칸 (특정 칸수를 설정하고 뒤에서 부터 채운다.)

print("{:10d}".format(1308)) # 총 10칸

# 2. 빈칸을 0으로 채우기

print("{:05d}".format(1308)) # 출력시 01308 (특정 칸수를 설정하고 뒤에서 부터 채운뒤 남은 칸은 0으로 채운다.)

print("{:010d}".format(1308)) # 출력시 0000001308

print("{:05d}".format(-1308)) # 출력시 -1308

print("{:010d}".format(-1308)) # 출력시 00000-1308 --> (-)부호도 한 칸을 차지한다

# 3. 기호와 함께 출력하기 

print("{:+d}".format(1308)) # 양수. 출력시 +1308 (+ 기호를 추가하면 양수의 경우에는 + 기호를 음수의 경우 -를 붙인다. 결국 +를 붙인다는  것은 부호를 표기 하겠다는 것이다.)

print("{:+d}".format(-1308)) # 음수. 출력시 -1308

print("{: d}".format(1308)) # 양수: 기호 부분 공백. 출력시 (공백)1308 

print("{: d}".format(-1308)) # 음수: 기호 부분 공백. 출력시 -1308

# 4. 조합해보기

print("{:+5d}".format(429)) # 기호를 뒤로 밀기. 출력시 (공백)+429

print("{:+5d}".format(-429)) # 기호를 뒤로 밀기. 출력시 (공백)-429

print("{:=+5d}".format(429)) # 기호를 앞으로 밀기. 출력시 +(공백)429

print("{:=+5d}".format(-429)) # 기호를 앞으로 밀기. 출력시 -(공백)429

print("{:+05d}".format(429)) # 0으로 채우기: 양수. 출력시 +0429

print("{:+05d}".format(-429)) # 0으로 채우기:음수. 출력시 -0429

# 5. 실수를 특정 칸에 표현하기

print("{:f}".format(13.08)) # 출력시 13.080000

print("{:15f}".format(13.08)) # 출력시 {(공백)*6}13.080000

print("{:+15f}".format(13.08)) # 출력시 {(공백)*5}+13.080000

print("{:015f}".format(13.08)) # 출력시 +0000013.080000

# 6. 소수점 아래 자릿수 지정하기 

print("{:15.3f}".format(13.08)) # 소수점 세 번째 자리수 까지. 출력시 {(공백)*9}13.080

print("{:15.2f}".format(13.08)) # 소수점 두 번째 자리수 까지. 출력시 {(공백)*10}13.08

print("{:15.1f}".format(13.08)) #소수점 첫 번쨰 자리수 까지. 출력시 {(공백)*11}13.1

# 7. 의미 없는 소수점 제거하기

print("{:g}".format(4.30)) # 출력시 4.3
\

# upper함수: "문자열".upper() --> 모든 알파벳을 대문자로 --> 따로 매개변수를 지닐 필요가 없다.
# lower함수: "문자열".lower() --> 모든 알파벳을 소문자로 --> 따로 매개변수를 지닐 필요가 없다.
print("hello".upper())
print("HELLO".lower())

\

# strip함수: "문자열".strip() --> ""에서 양옆에 맨끝의 여백(띄어쓰기, 줄바꿈, 탭을)을 모두 무시하는 함수이다. --> 따로 매개변수를 지닐 필요가 없다.
"    안녕 반가워 나는 강성제라고 해    ".strip()
# 왼쪽 여백만을 지우고 싶다면 lstrip함수를, 오른쪽 여백만을 지우고 싶다면 rstrip함수를 사용하면 된다.

\

# find함수: "문자열".find("문자") --> 찾고자 하는 문자(찾고자 하는 단어의 첫 부분을 찾아서 그 순서를 출력한다)가 문자열의 몇 번째 순서에 위치해 있는지 알아내는 함수(0은 첫번째 숫자를 의미). 만약 찾는 문자가 문자열 내에 없다면 -1을 출력한다. --> 매개변수는 문자이다. 
# rfind함수: find함수와 효과는 같으나 다른점은 find함수는 찾고자 하는 문자가 중복되면서 나올때 왼쪽에 있는 문자의 순서를 출력하지만 rfind함수는 오른쪽에 있는 문자의 순서를 출력한다.
"가나다라마바사".find("다")
"가나다라마바사".find("하")
"가나다라마바사가나다라마바사".find("라")
"가나다라마바사가나다라마바사".rfind("라")

\

# in연산자: "Text1" in "Text2" --> 만약 찾고자 하는 Text1이 Text2안에 있다면 True를 그렇지 않다면 false를 반환한다. --> 글자라서 "연산자"처럼 안 보일수 있지만 "연산자"이다.
"가" in "가나다라마바사"
"하" in "가나다라마바사"

\

# split함수: "".split("") --> 문자열을 어떻게 자를것인가에 대한 함수이다 split(" ")의 경우 띄어쓰기로 문자열을 자를것임을 의미한다.
a = "10 20 30 40 50".split(" ")
print(a)
['10', '20', '30', '40', '50']

\

a = int(input("첫 번째 정수:")) # a = input("첫 번째 정수: ")
b = int(input("두 번째 정수:")) # b = input("두 번째 정수: ")
print("\n"*2)
print(" {} {} {} ".format(a, b, a + b)) # print(" {} {} {} ".format(a, b, int(a) + int(b)))


