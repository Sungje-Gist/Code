# 튜플의 이해
# 튜플은 자료형이다. 
# 튜플이 리스트와 다른 기본적인 부분
# 1. 대괄호가 아니라 소괄호로 선언한다.
# 2. 한번 선언하면 값을 바꿀수 없다. 
a = (1, 2, 3, 4)
print(a[0]) # 출력시 1
# a[0] = 100 불가능

# 튜플을 사용하는 경우 1 : 복합 할당
[a, b] = [10, 20] 
(c, d) = (30, 40)
# a와 b에 10, 20을 대입하고, c와 d에 30, 40을 대입한다.
print(a, b, c, d) # 출력시 10 20 30 40

# 괄호가 없어도 튜플로 인식될 수 있다면 튜플
c, d = 30, 40
print(c, d)  # 출력시 30 40

# 튜플은 이렇게 한번에 여러개의 값을 할당할 때 쓰인다.

# 튜플을 사용하는 경우 2 : 스왑

a, b = 10, 20
print(a, b) # 출력시 10 20

a, b = b, a # 스왑 간단하게 하기
print(a, b) # 출력시 20 10

# 튜플을 사용하는 경우 3 : 튜플을 리턴하는 함수
# 어떤 함수에서 두가지 이상의 값을 리턴할 수 있다.
# divmod(x, y) Return the tuple (x//y, x%y)
a, b = 97, 40
print(divmod(a, b)) # 출력시 (2, 17)
몫, 나머지 = divmod(a, b)
print(몫)
print(나머지)

for (i, value) in enumerate([1, 2, 3, 4, 5, 6]): # (i, value)도 튜플이다.
    print("{}번째 요소는 {}입니다.".format(i, value))

# 튜플을 리턴하기
def test():
    return 10, 20

a, b = test()
print(a, b)

# 자주 실수하는 부분

# 요소를 하나 갖는 튜플

print([273]) # 출력시 [273]
print(type([273])) # class-list

print((273)) # 출력시 273
print(type((273))) # class-int
# 튜플의 경우 괄호를 생략할 수 있기 때문에 사실상
# print(273)
# print(type(273)) 를 입력한것과 동일하다.
# 만약에 요소가 한개만 있는 튜플을 만들고 싶다면 괄호안에 숫자를 입력한 뒤 쉼표를 찍어줘야만 한다.

a = (273) # a = 273 으로 인식한다. 왜냐하면 튜플은 괄호를 생략할 수 있기 때문이다.

a = (273, ) # a = (273) 즉 튜플로 인식한다.
# 이와 같이 요소가 한개인 튜플을 만들고 싶다면 요소뒤에 , 를 붙이자.

# 튜플은 딕셔너리의 키로 사용할 수 있다.
a ={
    (0, 0): 10,
    (0, 1): 20,
    (0, 2): 30,
    (0, 3): 40 
}
# 튜플 대신 리스트로 변경시 오류 발생 

print(a[(0, 0)])
print(a[0, 0])
# 튜플은 괄호가 생략가능하기 떄문에 두 경우 모두 성립.